---
description: 
globs: 
alwaysApply: false
---
# Frontend Integration

## Technology Stack

- **Styling**: Tailwind CSS (loaded via CDN)
- **JavaScript**: No JavaScript (no frameworks)
- **HTTP Library**: TwinSpark for enhanced HTML interactions
- **Architecture**: Server-rendered HTML with progressive enhancement

## Static Assets Structure

- [app/static/](mdc:app/static) - Source files for development
- [public/](mdc:public) - Built/compiled assets served to browsers
- [tailwind.config.js](mdc:tailwind.config.js) - Tailwind configuration

## CSS Development

We use only static tailwind css from CDN, no processing is done during build.

## JavaScript Integration

### AJAX and Partial Updates
The frontend uses partial HTML responses instead of JSON APIs:

1. **Form Submission**: JavaScript captures form data
2. **HTTP Request**: Sent to Prolog endpoint 
3. **Response**: Server returns HTML fragments
4. **DOM Update**: Handled by twinspark.js library available in `public/js/twinspark.min.js`

### TwinSpark Enhancement
[twinspark.min.js](mdc:public/js/twinspark.min.js) provides:
- Declarative HTML enhancements
- Form handling improvements
- Progressive enhancement patterns

## HTML Generation Flow

1. **User Action** → Frontend JavaScript
2. **HTTP Request** → [app/server.pl](mdc:app/server.pl) routing
3. **Route Handler** → Page controller in [app/pages/](mdc:app/pages)
4. **Business Logic** → Tax calculations in [app/lib/](mdc:app/lib)
5. **DCG Templates** → HTML generation in [app/components/](mdc:app/components)
6. **Response** → Partial HTML back to frontend
7. **DOM Update** → JavaScript updates specific page sections

## Development Guidelines

- **Progressive Enhancement**: Start with working HTML forms, make sure they are Twinspark compatible
- **Partial Updates**: Use AJAX for calculations, avoid full page reloads
- **Tailwind Classes**: Style directly in HTML generated by Prolog DCG rules
- **Browser Compatibility**: Test across different browsers (especially for tax calculations)
